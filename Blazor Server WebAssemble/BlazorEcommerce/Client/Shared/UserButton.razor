@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider 
@inject NavigationManager NavigationManager
@inject ICartService CartService

<div class="dropdown">
	<button @onclick="ToggleUserMenu"
		@onfocusout="HideUserMenu"
	    class="btn btn-secondary dropdown-toggle user-button">
	<i class="oi oi-person"></I>
	</button>
	<div class="dropdown-menu dropdown-menu-right @UserMenuCssClass">
	<AuthorizeView>
		<Authorized>
	    <a href="profile" class="dropdown-iten"> Profile </a>
		<hr/>
		<button class="dropdown-iten" @onclick="Logout"> Logout  </button>
		</Authorized>
		<NotAuthorized>
		<a href="login?returnUrl=@NavigationManager.ToBaseRelativePath(NavigationManager.Uri)" class="dropdown-iten"> Login  </a>
		<a href="register" class="dropdown-iten"> Register </a>

		</NotAuthorized>
	</AuthorizeView>
	</div>

</div>

@code {
	private bool showUserMenu = false;
	private string UserMenuCssClass => showUserMenu ? "show-menu" : null;
	private void ToggleUserMenu()
	{
		showUserMenu = !showUserMenu;
	} 
	private async Task HideUserMenu()
	{
		await Task.Delay(200);
		showUserMenu = false;
	}
	private async Task Logout()
	{
		await LocalStorage.RemoveItemAsync(LocalStorageKeys.authToken);
		await CartService.GetCartItemCount();
		await AuthenticationStateProvider.GetAuthenticationStateAsync();
		NavigationManager.NavigateTo("");
	}

}

